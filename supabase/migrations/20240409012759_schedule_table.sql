create table "public"."scheduled_tasks" (
    "task_id" bigint generated by default as identity not null,
    "scheduled_date" timestamp with time zone not null,
    "player_id" bigint,
    "team_id" bigint
);


alter table "public"."scheduled_tasks" enable row level security;

alter table "public"."task_players" add column "completed" boolean;

alter table "public"."task_players" add column "completed_at" timestamp with time zone;

CREATE UNIQUE INDEX scheduled_tasks_pkey ON public.scheduled_tasks USING btree (task_id);

alter table "public"."scheduled_tasks" add constraint "scheduled_tasks_pkey" PRIMARY KEY using index "scheduled_tasks_pkey";

alter table "public"."scheduled_tasks" add constraint "public_scheduled_tasks_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) not valid;

alter table "public"."scheduled_tasks" validate constraint "public_scheduled_tasks_player_id_fkey";

alter table "public"."scheduled_tasks" add constraint "public_scheduled_tasks_task_id_fkey" FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE not valid;

alter table "public"."scheduled_tasks" validate constraint "public_scheduled_tasks_task_id_fkey";

alter table "public"."scheduled_tasks" add constraint "public_scheduled_tasks_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE not valid;

alter table "public"."scheduled_tasks" validate constraint "public_scheduled_tasks_team_id_fkey";

grant delete on table "public"."scheduled_tasks" to "anon";

grant insert on table "public"."scheduled_tasks" to "anon";

grant references on table "public"."scheduled_tasks" to "anon";

grant select on table "public"."scheduled_tasks" to "anon";

grant trigger on table "public"."scheduled_tasks" to "anon";

grant truncate on table "public"."scheduled_tasks" to "anon";

grant update on table "public"."scheduled_tasks" to "anon";

grant delete on table "public"."scheduled_tasks" to "authenticated";

grant insert on table "public"."scheduled_tasks" to "authenticated";

grant references on table "public"."scheduled_tasks" to "authenticated";

grant select on table "public"."scheduled_tasks" to "authenticated";

grant trigger on table "public"."scheduled_tasks" to "authenticated";

grant truncate on table "public"."scheduled_tasks" to "authenticated";

grant update on table "public"."scheduled_tasks" to "authenticated";

grant delete on table "public"."scheduled_tasks" to "service_role";

grant insert on table "public"."scheduled_tasks" to "service_role";

grant references on table "public"."scheduled_tasks" to "service_role";

grant select on table "public"."scheduled_tasks" to "service_role";

grant trigger on table "public"."scheduled_tasks" to "service_role";

grant truncate on table "public"."scheduled_tasks" to "service_role";

grant update on table "public"."scheduled_tasks" to "service_role";

create policy "coach can create program"
on "public"."programs"
as permissive
for all
to authenticated
using ((team_id = get_coach_team(auth.uid())));


create policy "coach can schedule tasks"
on "public"."scheduled_tasks"
as permissive
for all
to authenticated
with check ((team_id = get_coach_team(auth.uid())));


create policy "players can view tasks"
on "public"."scheduled_tasks"
as permissive
for select
to authenticated
using ((player_id = get_player_id(auth.uid())));



