drop policy "exercise_access" on "public"."exercises";

alter table "public"."players" drop constraint "players_pkey";

drop index if exists "public"."players_pkey";

alter table "public"."players" drop column "player_id";

alter table "public"."players" add column "id" bigint generated by default as identity not null;

alter table "public"."task_exercises" add column "team_id" bigint not null;

CREATE UNIQUE INDEX players_pkey ON public.players USING btree (id);

alter table "public"."players" add constraint "players_pkey" PRIMARY KEY using index "players_pkey";

alter table "public"."task_exercises" add constraint "public_task_exercises_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE not valid;

alter table "public"."task_exercises" validate constraint "public_task_exercises_team_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_task(exercises bigint[], team_id bigint, title character varying, details jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
l_task_id bigint;
begin
insert into tasks(title, team_id, details) values (title, team_id, details) returning task_id into l_task_id;
for exercise_id in array_lower(exercises,1) .. array_upper(exercises,1) loop
     insert into task_exercises(task_id,exercise_id,team_id) values(l_task_id, exercise_id, team_id);
end loop;
end;
$function$
;

create policy "coach can view players"
on "public"."players"
as permissive
for all
to authenticated
using ((get_coach_team(auth.uid()) = team_id));


create policy "coach can add exercise to task"
on "public"."task_exercises"
as permissive
for all
to authenticated
using ((team_id = get_coach_team(auth.uid())));


create policy "coach can modify tasks"
on "public"."tasks"
as permissive
for all
to authenticated
using ((team_id = get_coach_team(auth.uid())));


create policy "coach can view teams"
on "public"."teams"
as permissive
for all
to authenticated
using ((auth.uid() = coach_id));


create policy "exercise_access"
on "public"."exercises"
as permissive
for all
to authenticated
using ((team_id = get_coach_team(auth.uid())));



