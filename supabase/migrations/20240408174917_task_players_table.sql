create table "public"."task_players" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "player_id" bigint not null,
    "task_id" bigint not null,
    "team_id" bigint not null
);


alter table "public"."task_players" enable row level security;

CREATE UNIQUE INDEX task_players_pkey ON public.task_players USING btree (id);

alter table "public"."task_players" add constraint "task_players_pkey" PRIMARY KEY using index "task_players_pkey";

alter table "public"."task_players" add constraint "public_task_players_player_id_fkey" FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE not valid;

alter table "public"."task_players" validate constraint "public_task_players_player_id_fkey";

alter table "public"."task_players" add constraint "public_task_players_task_id_fkey" FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE not valid;

alter table "public"."task_players" validate constraint "public_task_players_task_id_fkey";

alter table "public"."task_players" add constraint "public_task_players_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE not valid;

alter table "public"."task_players" validate constraint "public_task_players_team_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_player_id(user_id uuid)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$declare
player_id bigint;
begin
select id into player_id from players where players.user_id = user_id;
return player_id;
end;$function$
;

CREATE OR REPLACE FUNCTION public.create_task(exercises bigint[], team_id bigint, title character varying, details jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    l_task_id bigint;
    exercise_id bigint;
BEGIN
    INSERT INTO tasks(title, team_id, details) 
    VALUES (title, team_id, details) 
    RETURNING id INTO l_task_id;

    FOREACH exercise_id IN ARRAY exercises
    LOOP
        INSERT INTO task_exercises(task_id, exercise_id, team_id) 
        VALUES (l_task_id, exercise_id, team_id);
    END LOOP;
END;
$function$
;

grant delete on table "public"."task_players" to "anon";

grant insert on table "public"."task_players" to "anon";

grant references on table "public"."task_players" to "anon";

grant select on table "public"."task_players" to "anon";

grant trigger on table "public"."task_players" to "anon";

grant truncate on table "public"."task_players" to "anon";

grant update on table "public"."task_players" to "anon";

grant delete on table "public"."task_players" to "authenticated";

grant insert on table "public"."task_players" to "authenticated";

grant references on table "public"."task_players" to "authenticated";

grant select on table "public"."task_players" to "authenticated";

grant trigger on table "public"."task_players" to "authenticated";

grant truncate on table "public"."task_players" to "authenticated";

grant update on table "public"."task_players" to "authenticated";

grant delete on table "public"."task_players" to "service_role";

grant insert on table "public"."task_players" to "service_role";

grant references on table "public"."task_players" to "service_role";

grant select on table "public"."task_players" to "service_role";

grant trigger on table "public"."task_players" to "service_role";

grant truncate on table "public"."task_players" to "service_role";

grant update on table "public"."task_players" to "service_role";

create policy "players can modify their own record"
on "public"."players"
as permissive
for all
to authenticated
using ((user_id = auth.uid()));


create policy "Players can view tasks"
on "public"."task_players"
as permissive
for select
to authenticated
using ((player_id = get_player_id(auth.uid())));


create policy "coach can assign tasks"
on "public"."task_players"
as permissive
for all
to authenticated
using ((team_id = get_coach_team(auth.uid())));



