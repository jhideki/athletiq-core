drop function if exists "public"."upsert_person"(p_id uuid, p_age smallint, p_first_name text, p_last_name text, p_user_type user_type);

create table "public"."profiles" (
    "profile_id" bigint generated by default as identity not null,
    "person_id" uuid not null default gen_random_uuid(),
    "user_type" user_type,
    "team_id" bigint
);


alter table "public"."profiles" enable row level security;

alter table "public"."persons" drop column "user_type";

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (profile_id);

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."profiles" add constraint "public_profiles_person_id_fkey" FOREIGN KEY (person_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."profiles" validate constraint "public_profiles_person_id_fkey";

alter table "public"."profiles" add constraint "public_profiles_team_id_fkey" FOREIGN KEY (team_id) REFERENCES teams(id) ON UPDATE CASCADE not valid;

alter table "public"."profiles" validate constraint "public_profiles_team_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.profile_exists(p_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE
    l_count INTEGER;
BEGIN
    SELECT count(*) INTO l_count FROM profiles WHERE person_id = p_id;
    
    IF l_count = 0 THEN
        RETURN false;
    ELSE
        RETURN true;
    END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.upsert_person(p_id uuid, p_age smallint DEFAULT NULL::smallint, p_first_name text DEFAULT NULL::text, p_last_name text DEFAULT NULL::text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
declare
  l_count INTEGER;
BEGIN
    select count(*) into l_count from persons where persons.id=p_id;
    IF l_count != 0 THEN
        -- Update existing record
        UPDATE persons
        SET
            age = COALESCE(p_age, age),
            first_name = COALESCE(p_first_name, first_name),
            last_name = COALESCE(p_last_name, last_name)
        WHERE id = p_id;
    ELSE
        -- Insert new record
        INSERT INTO persons (age, first_name, last_name)
        VALUES (p_age, p_first_name, p_last_name);
    END IF;
END;
$function$
;

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

create policy "users can modify all"
on "public"."profiles"
as permissive
for all
to authenticated
using ((auth.uid() = person_id));



